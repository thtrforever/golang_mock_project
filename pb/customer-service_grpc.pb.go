// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: customer-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerGrpcClient is the client API for CustomerGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerGrpcClient interface {
	PingCustomerGrpc(ctx context.Context, in *GrpcPingCustomerGrpcRequest, opts ...grpc.CallOption) (*GrpcPingCustomerGrpcResponse, error)
	CreateCustomer(ctx context.Context, in *GrpcCreateCustomerRequest, opts ...grpc.CallOption) (*GrpcCreateCustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *GrpcUpdateCustomerRequest, opts ...grpc.CallOption) (*GrpcUpdateCustomerResponse, error)
}

type customerGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerGrpcClient(cc grpc.ClientConnInterface) CustomerGrpcClient {
	return &customerGrpcClient{cc}
}

func (c *customerGrpcClient) PingCustomerGrpc(ctx context.Context, in *GrpcPingCustomerGrpcRequest, opts ...grpc.CallOption) (*GrpcPingCustomerGrpcResponse, error) {
	out := new(GrpcPingCustomerGrpcResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomerGrpc/PingCustomerGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerGrpcClient) CreateCustomer(ctx context.Context, in *GrpcCreateCustomerRequest, opts ...grpc.CallOption) (*GrpcCreateCustomerResponse, error) {
	out := new(GrpcCreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomerGrpc/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerGrpcClient) UpdateCustomer(ctx context.Context, in *GrpcUpdateCustomerRequest, opts ...grpc.CallOption) (*GrpcUpdateCustomerResponse, error) {
	out := new(GrpcUpdateCustomerResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomerGrpc/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerGrpcServer is the server API for CustomerGrpc service.
// All implementations must embed UnimplementedCustomerGrpcServer
// for forward compatibility
type CustomerGrpcServer interface {
	PingCustomerGrpc(context.Context, *GrpcPingCustomerGrpcRequest) (*GrpcPingCustomerGrpcResponse, error)
	CreateCustomer(context.Context, *GrpcCreateCustomerRequest) (*GrpcCreateCustomerResponse, error)
	UpdateCustomer(context.Context, *GrpcUpdateCustomerRequest) (*GrpcUpdateCustomerResponse, error)
	mustEmbedUnimplementedCustomerGrpcServer()
}

// UnimplementedCustomerGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerGrpcServer struct {
}

func (UnimplementedCustomerGrpcServer) PingCustomerGrpc(context.Context, *GrpcPingCustomerGrpcRequest) (*GrpcPingCustomerGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingCustomerGrpc not implemented")
}
func (UnimplementedCustomerGrpcServer) CreateCustomer(context.Context, *GrpcCreateCustomerRequest) (*GrpcCreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerGrpcServer) UpdateCustomer(context.Context, *GrpcUpdateCustomerRequest) (*GrpcUpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerGrpcServer) mustEmbedUnimplementedCustomerGrpcServer() {}

// UnsafeCustomerGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerGrpcServer will
// result in compilation errors.
type UnsafeCustomerGrpcServer interface {
	mustEmbedUnimplementedCustomerGrpcServer()
}

func RegisterCustomerGrpcServer(s grpc.ServiceRegistrar, srv CustomerGrpcServer) {
	s.RegisterService(&CustomerGrpc_ServiceDesc, srv)
}

func _CustomerGrpc_PingCustomerGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcPingCustomerGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerGrpcServer).PingCustomerGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomerGrpc/PingCustomerGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerGrpcServer).PingCustomerGrpc(ctx, req.(*GrpcPingCustomerGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerGrpc_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcCreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerGrpcServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomerGrpc/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerGrpcServer).CreateCustomer(ctx, req.(*GrpcCreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerGrpc_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerGrpcServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomerGrpc/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerGrpcServer).UpdateCustomer(ctx, req.(*GrpcUpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerGrpc_ServiceDesc is the grpc.ServiceDesc for CustomerGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CustomerGrpc",
	HandlerType: (*CustomerGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingCustomerGrpc",
			Handler:    _CustomerGrpc_PingCustomerGrpc_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerGrpc_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerGrpc_UpdateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer-service.proto",
}
