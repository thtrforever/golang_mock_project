// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: flight-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightGrpcClient is the client API for FlightGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightGrpcClient interface {
	PingFlightGrpc(ctx context.Context, in *GrpcPingFlightGrpcRequest, opts ...grpc.CallOption) (*GrpcPingFlightGrpcResponse, error)
	CreateFlight(ctx context.Context, in *GrpcCreateFlightRequest, opts ...grpc.CallOption) (*GrpcCreateFlightResponse, error)
	UpdateFlight(ctx context.Context, in *GrpcUpdateFlightRequest, opts ...grpc.CallOption) (*GrpcUpdateFlightResponse, error)
	SearchOneWayFlight(ctx context.Context, in *GrpcSearchOneWayFlightRequest, opts ...grpc.CallOption) (*GrpcSearchOneWayFlightResponse, error)
	SearchRoundTripFlight(ctx context.Context, in *GrpcSearchRoundTripFlightRequest, opts ...grpc.CallOption) (*GrpcSearchRoundTripFlightResponse, error)
}

type flightGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightGrpcClient(cc grpc.ClientConnInterface) FlightGrpcClient {
	return &flightGrpcClient{cc}
}

func (c *flightGrpcClient) PingFlightGrpc(ctx context.Context, in *GrpcPingFlightGrpcRequest, opts ...grpc.CallOption) (*GrpcPingFlightGrpcResponse, error) {
	out := new(GrpcPingFlightGrpcResponse)
	err := c.cc.Invoke(ctx, "/pb.FlightGrpc/PingFlightGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightGrpcClient) CreateFlight(ctx context.Context, in *GrpcCreateFlightRequest, opts ...grpc.CallOption) (*GrpcCreateFlightResponse, error) {
	out := new(GrpcCreateFlightResponse)
	err := c.cc.Invoke(ctx, "/pb.FlightGrpc/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightGrpcClient) UpdateFlight(ctx context.Context, in *GrpcUpdateFlightRequest, opts ...grpc.CallOption) (*GrpcUpdateFlightResponse, error) {
	out := new(GrpcUpdateFlightResponse)
	err := c.cc.Invoke(ctx, "/pb.FlightGrpc/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightGrpcClient) SearchOneWayFlight(ctx context.Context, in *GrpcSearchOneWayFlightRequest, opts ...grpc.CallOption) (*GrpcSearchOneWayFlightResponse, error) {
	out := new(GrpcSearchOneWayFlightResponse)
	err := c.cc.Invoke(ctx, "/pb.FlightGrpc/SearchOneWayFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightGrpcClient) SearchRoundTripFlight(ctx context.Context, in *GrpcSearchRoundTripFlightRequest, opts ...grpc.CallOption) (*GrpcSearchRoundTripFlightResponse, error) {
	out := new(GrpcSearchRoundTripFlightResponse)
	err := c.cc.Invoke(ctx, "/pb.FlightGrpc/SearchRoundTripFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightGrpcServer is the server API for FlightGrpc service.
// All implementations must embed UnimplementedFlightGrpcServer
// for forward compatibility
type FlightGrpcServer interface {
	PingFlightGrpc(context.Context, *GrpcPingFlightGrpcRequest) (*GrpcPingFlightGrpcResponse, error)
	CreateFlight(context.Context, *GrpcCreateFlightRequest) (*GrpcCreateFlightResponse, error)
	UpdateFlight(context.Context, *GrpcUpdateFlightRequest) (*GrpcUpdateFlightResponse, error)
	SearchOneWayFlight(context.Context, *GrpcSearchOneWayFlightRequest) (*GrpcSearchOneWayFlightResponse, error)
	SearchRoundTripFlight(context.Context, *GrpcSearchRoundTripFlightRequest) (*GrpcSearchRoundTripFlightResponse, error)
	mustEmbedUnimplementedFlightGrpcServer()
}

// UnimplementedFlightGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedFlightGrpcServer struct {
}

func (UnimplementedFlightGrpcServer) PingFlightGrpc(context.Context, *GrpcPingFlightGrpcRequest) (*GrpcPingFlightGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFlightGrpc not implemented")
}
func (UnimplementedFlightGrpcServer) CreateFlight(context.Context, *GrpcCreateFlightRequest) (*GrpcCreateFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFlightGrpcServer) UpdateFlight(context.Context, *GrpcUpdateFlightRequest) (*GrpcUpdateFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFlightGrpcServer) SearchOneWayFlight(context.Context, *GrpcSearchOneWayFlightRequest) (*GrpcSearchOneWayFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOneWayFlight not implemented")
}
func (UnimplementedFlightGrpcServer) SearchRoundTripFlight(context.Context, *GrpcSearchRoundTripFlightRequest) (*GrpcSearchRoundTripFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoundTripFlight not implemented")
}
func (UnimplementedFlightGrpcServer) mustEmbedUnimplementedFlightGrpcServer() {}

// UnsafeFlightGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightGrpcServer will
// result in compilation errors.
type UnsafeFlightGrpcServer interface {
	mustEmbedUnimplementedFlightGrpcServer()
}

func RegisterFlightGrpcServer(s grpc.ServiceRegistrar, srv FlightGrpcServer) {
	s.RegisterService(&FlightGrpc_ServiceDesc, srv)
}

func _FlightGrpc_PingFlightGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcPingFlightGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightGrpcServer).PingFlightGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightGrpc/PingFlightGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightGrpcServer).PingFlightGrpc(ctx, req.(*GrpcPingFlightGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightGrpc_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcCreateFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightGrpcServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightGrpc/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightGrpcServer).CreateFlight(ctx, req.(*GrpcCreateFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightGrpc_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightGrpcServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightGrpc/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightGrpcServer).UpdateFlight(ctx, req.(*GrpcUpdateFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightGrpc_SearchOneWayFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcSearchOneWayFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightGrpcServer).SearchOneWayFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightGrpc/SearchOneWayFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightGrpcServer).SearchOneWayFlight(ctx, req.(*GrpcSearchOneWayFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightGrpc_SearchRoundTripFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcSearchRoundTripFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightGrpcServer).SearchRoundTripFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlightGrpc/SearchRoundTripFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightGrpcServer).SearchRoundTripFlight(ctx, req.(*GrpcSearchRoundTripFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightGrpc_ServiceDesc is the grpc.ServiceDesc for FlightGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FlightGrpc",
	HandlerType: (*FlightGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingFlightGrpc",
			Handler:    _FlightGrpc_PingFlightGrpc_Handler,
		},
		{
			MethodName: "CreateFlight",
			Handler:    _FlightGrpc_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _FlightGrpc_UpdateFlight_Handler,
		},
		{
			MethodName: "SearchOneWayFlight",
			Handler:    _FlightGrpc_SearchOneWayFlight_Handler,
		},
		{
			MethodName: "SearchRoundTripFlight",
			Handler:    _FlightGrpc_SearchRoundTripFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight-service.proto",
}
