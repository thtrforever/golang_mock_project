// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: booking.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBookingFlight = `-- name: CreateBookingFlight :one
INSERT INTO booking_flights(
    booking_transaction_id, 
    sequence, 
    departure_airport_code, 
    arrival_airport_code, 
    departure_date_time, 
    arrival_date_time, 
    booking_class, 
    price, 
    currency_code
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, booking_transaction_id, sequence, departure_airport_code, arrival_airport_code, departure_date_time, arrival_date_time, booking_class, currency_code, price
`

type CreateBookingFlightParams struct {
	BookingTransactionID sql.NullInt64 `json:"booking_transaction_id"`
	Sequence             int32         `json:"sequence"`
	DepartureAirportCode string        `json:"departure_airport_code"`
	ArrivalAirportCode   string        `json:"arrival_airport_code"`
	DepartureDateTime    time.Time     `json:"departure_date_time"`
	ArrivalDateTime      time.Time     `json:"arrival_date_time"`
	BookingClass         string        `json:"booking_class"`
	Price                float64       `json:"price"`
	CurrencyCode         string        `json:"currency_code"`
}

func (q *Queries) CreateBookingFlight(ctx context.Context, arg CreateBookingFlightParams) (BookingFlight, error) {
	row := q.db.QueryRowContext(ctx, createBookingFlight,
		arg.BookingTransactionID,
		arg.Sequence,
		arg.DepartureAirportCode,
		arg.ArrivalAirportCode,
		arg.DepartureDateTime,
		arg.ArrivalDateTime,
		arg.BookingClass,
		arg.Price,
		arg.CurrencyCode,
	)
	var i BookingFlight
	err := row.Scan(
		&i.ID,
		&i.BookingTransactionID,
		&i.Sequence,
		&i.DepartureAirportCode,
		&i.ArrivalAirportCode,
		&i.DepartureDateTime,
		&i.ArrivalDateTime,
		&i.BookingClass,
		&i.CurrencyCode,
		&i.Price,
	)
	return i, err
}

const createBookingPassenger = `-- name: CreateBookingPassenger :one
INSERT INTO booking_passengers(
    booking_transaction_id, 
    title, 
    last_name, 
    first_name,
    ffp_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, booking_transaction_id, title, last_name, first_name, ffp_number, ticket_number
`

type CreateBookingPassengerParams struct {
	BookingTransactionID sql.NullInt64  `json:"booking_transaction_id"`
	Title                sql.NullString `json:"title"`
	LastName             sql.NullString `json:"last_name"`
	FirstName            sql.NullString `json:"first_name"`
	FfpNumber            sql.NullString `json:"ffp_number"`
}

func (q *Queries) CreateBookingPassenger(ctx context.Context, arg CreateBookingPassengerParams) (BookingPassenger, error) {
	row := q.db.QueryRowContext(ctx, createBookingPassenger,
		arg.BookingTransactionID,
		arg.Title,
		arg.LastName,
		arg.FirstName,
		arg.FfpNumber,
	)
	var i BookingPassenger
	err := row.Scan(
		&i.ID,
		&i.BookingTransactionID,
		&i.Title,
		&i.LastName,
		&i.FirstName,
		&i.FfpNumber,
		&i.TicketNumber,
	)
	return i, err
}

const createBookingTransaction = `-- name: CreateBookingTransaction :one
INSERT INTO booking_transactions(
    reservation_code, 
    status, 
    create_date
) VALUES (
    $1, $2, $3
) RETURNING id, reservation_code, status, error_code, error_message, create_date, modify_date
`

type CreateBookingTransactionParams struct {
	ReservationCode sql.NullString `json:"reservation_code"`
	Status          sql.NullString `json:"status"`
	CreateDate      sql.NullTime   `json:"create_date"`
}

func (q *Queries) CreateBookingTransaction(ctx context.Context, arg CreateBookingTransactionParams) (BookingTransaction, error) {
	row := q.db.QueryRowContext(ctx, createBookingTransaction, arg.ReservationCode, arg.Status, arg.CreateDate)
	var i BookingTransaction
	err := row.Scan(
		&i.ID,
		&i.ReservationCode,
		&i.Status,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}

const getBookingTransactionsByReservationCode = `-- name: GetBookingTransactionsByReservationCode :many
SELECT id, reservation_code, status, error_code, error_message, create_date, modify_date FROM booking_transactions
WHERE 
    reservation_code=$1
`

func (q *Queries) GetBookingTransactionsByReservationCode(ctx context.Context, reservationCode sql.NullString) ([]BookingTransaction, error) {
	rows, err := q.db.QueryContext(ctx, getBookingTransactionsByReservationCode, reservationCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BookingTransaction{}
	for rows.Next() {
		var i BookingTransaction
		if err := rows.Scan(
			&i.ID,
			&i.ReservationCode,
			&i.Status,
			&i.ErrorCode,
			&i.ErrorMessage,
			&i.CreateDate,
			&i.ModifyDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingTransactionStatus = `-- name: UpdateBookingTransactionStatus :one
UPDATE booking_transactions
SET 
    status=$2, 
    error_code=$3, 
    error_message=$4, 
    modify_date=$5
WHERE 
    id=$1
RETURNING id, reservation_code, status, error_code, error_message, create_date, modify_date
`

type UpdateBookingTransactionStatusParams struct {
	ID           int64          `json:"id"`
	Status       sql.NullString `json:"status"`
	ErrorCode    sql.NullInt32  `json:"error_code"`
	ErrorMessage sql.NullString `json:"error_message"`
	ModifyDate   sql.NullTime   `json:"modify_date"`
}

func (q *Queries) UpdateBookingTransactionStatus(ctx context.Context, arg UpdateBookingTransactionStatusParams) (BookingTransaction, error) {
	row := q.db.QueryRowContext(ctx, updateBookingTransactionStatus,
		arg.ID,
		arg.Status,
		arg.ErrorCode,
		arg.ErrorMessage,
		arg.ModifyDate,
	)
	var i BookingTransaction
	err := row.Scan(
		&i.ID,
		&i.ReservationCode,
		&i.Status,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}
